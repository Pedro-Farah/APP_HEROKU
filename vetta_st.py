import streamlit as st


# Configurando o t√≠tulo

st.set_page_config(page_title=None, page_icon=None, layout='centered', initial_sidebar_state='expanded')

def pag_inicial():

	st.title("üëã Ol√°, esta √© a documenta√ß√£o do programa!")
	st.markdown("---")
	st.markdown("### Pedro Oliveira Annoni Farah - Est√°gio Vetta ")
	st.markdown("---")
	st.markdown("Este documento foi feito para informar sobre o uso correto do `Sistema de Cadastro de Equipamentos e Medidores` para a constru√ß√£o de uma solu√ß√£o completa de gest√£o de energia. ")
	st.markdown("Aqui voc√™ poder√° navegar entre os t√≥picos e entender o funcionamento do c√≥digo!")
	st.markdown("O objetivo deste app  √© fornecer mais algumas informa√ß√µes de como foi realizada a programa√ß√£o do algoritmo criado para o teste t√©cnico da Vetta!  ")
	st.markdown("---")
	st.markdown("")
	st.markdown("### ‚ö° Sobre a proposta")
	st.markdown("")
	#st.write(dict) 

	st.info("Pensando no desenvolvimento de  uma solu√ß√£o completa de gest√£o de energia e utilidades para grandes consumidores , era necess√°rio o desenvolvimento de um sistema para permitir o registro dos equipamentos e poss√≠veis medidores utilizados por determinada empresa.  ")
	st.markdown("### üíª Sobre o programa")
	st.markdown("")
	st.info("O programa foi desenvolvido como uma aplica√ß√£o de console, isto √©, um c√≥digo execut√°vel com uma interface puramente textual. Por isso, o algoritmo tem um funcionamento bastante simples e intuitivo para o usu√°rio.")
	st.markdown("### üö© Sobre a documenta√ß√£o")
	st.markdown("")
	st.info("Neste app, √© poss√≠vel que seja feita a navega√ß√£o interativa pela documenta√ß√£o. Ao lado, h√° um menu com algumas op√ß√µes selecion√°veis que se clicadas exibem informa√ß√µes sobre o desenvolvimento e funcionamento do algoritmo! ")

	st.markdown("<div align='center'><br>"
                "<img src='https://img.shields.io/badge/Feito%20COM-PYTHON%20-red?style=for-the-badge'"
                "alt='API stability' height='25'/>"
                "<img src='https://img.shields.io/badge/EDITADO%20COM-SUBLIME-blue?style=for-the-badge'"
                "alt='API stability' height='25'/>"
                "<img src='https://img.shields.io/badge/DESENVOLVIDO%20COM-Streamlit-green?style=for-the-badge'"
                "alt='API stability' height='25'/></div>", unsafe_allow_html=True)
	
	st.markdown("---")
add_sidebar = st.sidebar.selectbox("O que deseja entender?", ('In√≠cio','Premissas','Funcionamento','Fim'))
if(add_sidebar == 'In√≠cio'):
	pag_inicial()





if (add_sidebar == 'Premissas'):
	st.title("üìë Premissas!")
	st.markdown("---")
	st.markdown("O objetivo do sistema era possibilitar a praticidade para o cadastro dos equipamentos utilizados pela empresa. Assim, a jun√ß√£o da linguagem Python com a interface  do tipo console possibilitou que o programa adquirisse as seguintes caracter√≠sticas:")
	'''
	- [x] Simplicidade 
	- [x] Rapidez
	- [x] Leveza
	- [x] Praticidade



	'''
	st.warning("Juntamente com a linguagem Python, tamb√©m foram utilizados o `Sublime Text` e o `Jupyter Notebook.`")
	
	'''

	O programa foi desenvolvido com um `menu`do tipo num√©rico, de modo que cada d√≠gito correspondesse a uma op√ß√£o a ser tomada pelo algoritmo. Assim, a cada momento o usu√°rio teria o controle do que fazer durante a utiliza√ß√£o do sistema. 

 ---

	'''



if (add_sidebar == 'Funcionamento'):
	st.title("üîç Funcionamento!")
	st.markdown("---")
	'''
	O funcionamento do programa √© bastante simples e intuitivo. Ao abrir o c√≥digo execut√°vel, o usu√°rio se depara com uma tela inicial e com um menu principal com as seguintes op√ß√µes:

 1. Cadastrar Equipamento
 2. Pesquisar Equipamento
 3. Listar Todos 
 4. Sair
	'''
	st.markdown("---")
	st.markdown("Agora, voc√™ pode entender cada uma das seguintes etapas do c√≥digo do programa!")
	st.markdown("### Tela Inicial")
	st.markdown("Essa primeira parte do c√≥digo, serve apenas para que o usu√°rio visualize uma tela inicial com o t√≠tulo do programa e entre em contato com o menu pela primeira vez:")
	code3 = '''def Tela_inicial():
    
    os.system('cls')
              
    print("\u001b[36;1m**********************************************")
    print("***  Sistema de cadastro de equipamentos!  ***")
    print("**********************************************\u001b[37m")
    Enter()
    print("Seja bem-vindo ao sistema de cadastros de Equipamentos e Medidores da \u001b[35;1mVetta!\u001b[37m")
    Enter()
    print("As op√ß√µes do sistema est√£o listadas abaixo: ")
 	
# Cria√ß√£o do menu 
def Menu():
    
    print("\n 1: Cadastrar Equipamento \n 2: Pesquisar Equipamento \n 3: Listar todos \n 4: Sair")
    Enter()
    return input("D√≠gite o n√∫mero correspondente ao item do menu: ")

	'''
	st.code(code3)

	st.markdown("### Menu")
	st.markdown("Para entender o funcionamento do menu, escolha sobre qual item voc√™ gostaria de ler mais: ")
	a = st.selectbox("Escolha uma op√ß√£o: ", ("Cadastrar Equipamento", "Pesquisar Equipamento", "Listar todos", "Sair"))
	if(a == "Cadastrar Equipamento"):
		'''
		Ao escolher a op√ß√£o 1, o usu√°rio deve informar o nome e o c√≥digo do equipamento, obrigatoriamente. Depois, fica a crit√©rio do usu√°rio informar ou n√£o um medidor. Caso decida informar, ent√£o deve informar tamb√©m sua resolu√ß√£o para que o cadastro seja conclu√≠do. Se o equipamento n√£o possuir medidor, o cadastro √© automaticamente conclu√≠do assim que o usu√°rio informar que n√£o deseja inseri-lo. O c√≥digo abaixo exemplifica o que foi escrito:

		
		'''
		code2 = '''def Cadastro():

    	os.system('cls')
    	print("Voc√™ est√° na sess√£o de \u001b[32;1mCadastro!\u001b[37m")
    	Enter()
    	print("Na sequ√™ncia, voc√™ dever√° informar os seguintes par√¢metros: ")
    
    	print("\n A: Nome \n B: C√≥digo  \n C: Medidor (se houver) \n D: Resolu√ß√£o(se houver)")
    	Enter()
    	nome_eq = input("Por favor, entre com o nome do equipamento: ") 
    	Enter()
    	cod_eq = input("Agora, entre com o c√≥digo do equipamento: ") 
    	Enter()
    	nomes.append(nome_eq)
    	cod.append(cod_eq)
    	# Chamada da fun√ß√£o do medidor
    	Medidor()

    			'''
		st.code(code2)
		st.markdown("Para bem entender essa parte do c√≥digo, tamb√©m √© importante conhecer a fun√ß√£o `Medidor`: ")
		code1 = '''# Cadastro de um medidor para o equipamento
def Medidor():
    
    med =  input("Deseja cadastrar um medidor (S/N)? ")
    Enter()

    # Se o cliente desejar informar um medidor
    if (med == 'S'):
        nome_med = input("Por favor, informe o nome do medidor: ")
        Enter()
        res = input ("Agora, informe a resolu√ß√£o do medidor: ")
        medidores.append(nome_med)
        resolucoes.append(res)
        os.system('cls')
        print(" \u001b[32;1mCadastro conclu√≠do!\u001b[37m O que deseja fazer agora?")
    
    # Caso n√£o haja medidor
    elif (med == 'N'):
        
        medidores.append('***')
        resolucoes.append('***')
        os.system('cls')
        
        print("\u001b[32;1mCadastro conclu√≠do!\u001b[37m O que deseja fazer agora?")
    
    # Comando Inv√°lido
    else:
      print("\u001b[31;1mComando Inv√°lido. Por favor, digite S ou N.\u001b[37m")
      Medidor()

	'''
		st.code(code1)
		st.markdown("---")


	if (a == 'Pesquisar Equipamento'):

		'''
		A op√ß√£o 2 permite que o usu√°rio pesquise pelo nome de um equipamento. Caso este j√° tenha sido registrado, o sistema retorna seu nome, c√≥digo, medidor e resolu√ß√£o. Caso o sistema n√£o encontre o equipamento buscado, ent√£o uma mensagem de aviso aparece. 
		Abaixo, √© poss√≠vel visualizar o c√≥digo: 

		'''

		code2 = '''chave = input("Digite o nome  do equipamento que voce procura: ")
    
    procura = list(dict1.values())[0]
    x = 0
    
    # Caso j√° haja itens preenchidos
    if (len(procura) > 0):
        for i in range(len(procura)):
            if (chave == procura[i]):
                res = {"Nome" :procura[i], "C√≥digo": list(dict1.values())[1][i], 
                       "Medidor": list(dict1.values())[2][i], "Resolu√ß√£o": list(dict1.values())[3][i]}
                os.system('cls')
                print(" \u001b[32;1mAqui est√° seu equipamento!\u001b[37m O que deseja fazer agora?")
                print(res)
                Enter()
                
                x = 1
                
        if (x == 0):
            os.system('cls')
            print("\u001b[31;1mEquipamento n√£o cadastrado! Favor rever se o nome est√° correto\u001b[37m")
    
    # Se n√£o houver itens cadastrados
    else:
        os.system('cls')
        
        print("\u001b[31;1mPrimeiro,cadastre os equipamentos!\u001b[37m")



	'''
		st.code(code2)

		st.markdown("---")


	if (a == 'Listar todos'):
		'''
		Caso  o usu√°rio escolha o n√∫mero 3, o sistema retorna todos os registros com todos os seus par√¢metros que j√° foram inseridos. Se n√£o houver nenhum registro, o sistema pede que o usu√°rio primeiro preencha com os equipamentos:


		'''

		code2 = '''# Listagem dos registros 
def Lista():

    procura = list(dict1.values())[0]
    
    # Se j√° houver registros
    if (len(procura) > 0):
        print("\u001b[32;1mEstes s√£o seus registros!\u001b[37m O que deseja fazer agora?")
        for j in range(len(procura)):
            res = {"Nome" :procura[j], "C√≥digo": list(dict1.values())[1][j], 
                  "Medidor": list(dict1.values())[2][j], "Resolu√ß√£o": list(dict1.values())[3][j]}
            
            
            
            print(res)
            
            Enter()
    # Se ainda n√£o houver
    else:
      os.system('cls')
      
      print("\u001b[31;1mPrimeiro,cadastre os equipamentos!\u001b[37m")


	'''
		st.code(code2)
		st.markdown("---")

	if(a == 'Sair'):

		'''
		A op√ß√£o 4, como o pr√≥prio nome indica, encerra o sistema. 
		'''

		code2 = '''# Encerra o programa
def Sair():
    
    print("A√ß√£o finalizada!")

	'''
		st.code(code2)
		st.markdown("---")

if (add_sidebar == 'Fim'):
	
	st.title("‚ùó Informa√ß√µes finais!")
	st.markdown("---")

	'''
	 * Mais informa√ß√µes podem ser vistas no c√≥digo completo.
	 * Obrigado por ter lido a documenta√ß√£o




	'''
	t = st.checkbox("Este documento foi √∫til pra voc√™?")
	if(t == 1):
		st.balloons()
	




	

	

	

	


		









